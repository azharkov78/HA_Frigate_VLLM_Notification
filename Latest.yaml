blueprint:
  name: Simplified Frigate LLM Notification with Telegram (v0.65)
  author: whag (modified by Grok)
  description: >
    A simplified blueprint for Frigate notifications using Telegram and Home Assistant Companion App.
    Monitors MQTT frigate/reviews topic for new and end events.
    Does not require JSON parsing, making it compatible with all Home Assistant versions.
    Supports Frigate, Downloader, LLM Vision, and Telegram integrations.
    Tested on Android and Telegram.

    Requirements:
    - Home Assistant with MQTT broker setup.
    - Frigate integration with MQTT setup[](https://github.com/blakeblackshear/frigate-hass-integration).
    - LLM Vision integration for image/video analysis[](https://github.com/valentinfrlch/ha-llmvision).
    - Downloader integration[](https://www.home-assistant.io/integrations/downloader/).
    - Telegram Bot integration[](https://www.home-assistant.io/integrations/telegram_bot/).

    Features:
    - Text-based input for objects and zones to avoid JSON parsing.
    - Simple template conditions for object and zone matching.
    - Supports multiple cameras, LLM Vision analysis, and Telegram notifications.
    - Customizable notification messages and titles.
    - Parallel execution for performance.

    Version: v0.65

  domain: automation
  input:
    frigate:
      name: Frigate Options
      icon: mdi:cog
      description: Configure Frigate-related settings
      collapsed: true
      input:
        in_camera:
          name: Frigate Cameras
          description: Select one or more Frigate cameras to monitor.
          selector:
            entity:
              multiple: true
              filter:
                - integration: frigate
                  domain: camera
        in_objects:
          name: Required Objects
          description: Comma-separated list of objects to detect (e.g., person,car). Leave empty to detect all objects.
          default: ""
          selector:
            text:
              multiline: false
        in_zones:
          name: Required Zones
          description: Comma-separated list of zones to monitor (e.g., front_porch,backyard). Leave empty for any zone.
          default: ""
          selector:
            text:
              multiline: false
        in_host:
          name: Home Assistant URL
          description: Home Assistant URL (e.g., http://192.168.1.100:8123).
          default: http://192.168.1.1:8123
          selector:
            text:
              multiline: false
    llm:
      name: LLM Vision Options
      icon: mdi:cog
      description: Configure LLM Vision for image/video analysis
      collapsed: true
      input:
        provider:
          name: Provider
          description: LLM Vision provider for analysis.
          selector:
            config_entry:
              integration: llmvision
        model:
          name: AI Model
          description: AI model for vision analysis.
          default: gemini-1.5-flash
          selector:
            select:
              options:
                - gemini-1.5-flash
                - gpt-4o
                - gpt-4o-mini
                - claude-3-5-sonnet-latest
              multiple: false
              custom_value: true
        use_llm_image:
          name: Use LLM for Snapshot
          description: Enable LLM Vision for snapshot analysis.
          default: true
          selector:
            boolean: {}
        image_prompt:
          name: Snapshot Prompt
          description: Prompt for snapshot analysis.
          default: "Summarize the image in one sentence, focusing on detected objects in the specified area."
          selector:
            text:
              multiline: true
        use_llm_clip:
          name: Use LLM for Clip
          description: Enable LLM Vision for video clip analysis.
          default: false
          selector:
            boolean: {}
        clip_prompt:
          name: Clip Prompt
          description: Prompt for video clip analysis.
          default: "Analyze the video clip and describe the actions of detected objects in one sentence."
          selector:
            text:
              multiline: true
    downloader:
      name: Downloader Options
      icon: mdi:cog
      description: Configure file download settings
      collapsed: true
      input:
        download_dir:
          name: Downloader Directory
          description: Directory for downloaded snapshots and clips.
          default: downloader
          selector:
            text:
              multiline: false
        download_image_wait:
          name: Image Download Wait Time
          description: Maximum wait time (seconds) for snapshot download.
          default: 5
          selector:
            number:
              min: 1
              max: 120
              step: 1
              mode: slider
        download_clip_wait:
          name: Clip Download Wait Time
          description: Maximum wait time (seconds) for clip download.
          default: 30
          selector:
            number:
              min: 1
              max: 120
              step: 1
              mode: slider
    telegram:
      name: Telegram Notification Options
      icon: mdi:telegram
      description: Configure Telegram notifications
      collapsed: true
      input:
        telegram_chat_id:
          name: Telegram Chat ID
          description: Telegram chat ID (e.g., @YourChannel or user ID).
          default: ""
          selector:
            text:
              multiline: false
        telegram_parse_mode:
          name: Telegram Parse Mode
          description: Message formatting (MarkdownV2, HTML, or None).
          default: ""
          selector:
            select:
              options:
                - label: None
                  value: ""
                - label: MarkdownV2
                  value: MarkdownV2
                - label: HTML
                  value: HTML
              mode: dropdown
        telegram_silent:
          name: Silent Notification
          description: Send Telegram notifications without sound.
          default: false
          selector:
            boolean: {}
    notify:
      name: Notification Options
      icon: mdi:bell
      description: Configure Home Assistant Companion App notifications
      collapsed: true
      input:
        notify_devices:
          name: Notify Devices
          description: Devices to send notifications to via Companion App.
          default: []
          selector:
            device:
              multiple: true
              filter:
                - integration: mobile_app
        notification_title:
          name: Notification Title
          description: Title for notifications.
          default: "{{ camera_name }} Alert"
          selector:
            text:
              multiline: false
        notification_message:
          name: Notification Message
          description: Message for notifications.
          default: "Detected {{ objects }} in {{ zones }}."
          selector:
            text:
              multiline: true
        cooldown:
          name: Cooldown
          description: Time (minutes) to wait before sending another notification.
          default: 2
          selector:
            number:
              min: 0
              max: 60
              step: 1
              mode: slider

triggers:
  - trigger: mqtt
    topic: frigate/reviews
    payload: new
    value_template: "{{ value_json['type'] }}"
    id: new_event
  - trigger: mqtt
    topic: frigate/reviews
    payload: end
    value_template: "{{ value_json['type'] }}"
    id: end_event

conditions:
  - condition: template
    value_template: "{{ camera in input_camera_name }}"
    alias: Camera Match
  - condition: template
    value_template: "{{ input_objects == '' or objects | lower in input_objects | lower }}"
    alias: Object Match
  - condition: template
    value_template: "{{ input_zones == '' or zones | lower in input_zones | lower }}"
    alias: Zone Match

actions:
  - action: logbook.log
    metadata: {}
    data:
      name: Simplified Frigate Notification Log
      message: >
        Event type: {{ event_type }}
        Camera: {{ camera_name }}
        Objects: {{ objects }}
        Zones: {{ zones }}
        Notification devices: {{ notify_names }}
        Telegram chat ID: {{ telegram_chat_id }}
  - alias: Handle New Event
    if:
      - condition: trigger
        id: new_event
    then:
      - delay:
          seconds: 2
      - parallel:
          - alias: Download and Process Snapshot
            repeat:
              sequence:
                - action: downloader.download_file
                  continue_on_error: true
                  data:
                    overwrite: true
                    url: "{{ host }}/api/frigate/notifications/{{ event_id }}/snapshot.jpg"
                    subdir: "frigate"
                    filename: "{{ event_id }}_snapshot.jpg"
                - wait_for_trigger:
                    - trigger: event
                      event_type: downloader_download_completed
                      event_data:
                        url: "{{ host }}/api/frigate/notifications/{{ event_id }}/snapshot.jpg"
                        filename: "{{ event_id }}_snapshot.jpg"
                      id: image_exists
                  timeout:
                    seconds: !input download_image_wait
                  continue_on_timeout: true
                - if:
                    - condition: template
                      value_template: "{{ wait.trigger.id == 'image_exists' }}"
                  then:
                    - if:
                        - condition: template
                          value_template: "{{ use_llm_image }}"
                      then:
                        - action: llmvision.image_analyzer
                          data:
                            provider: !input provider
                            model: !input model
                            image_file: "{{ download_dir }}/{{ event_id }}_snapshot.jpg"
                            message: !input image_prompt
                            target_width: 1080
                            max_tokens: 100
                          response_variable: llm_response
                        - variables:
                            title: "{{ llm_response.response_title | default(notification_title) }}"
                            message: "{{ llm_response.response_text | default(notification_message) }}"
                      else:
                        - variables:
                            title: !input notification_title
                            message: !input notification_message
                    - repeat:
                        for_each: "{{ notify_names }}"
                        sequence:
                          - action: notify.{{ repeat.item }}
                            data:
                              title: "{{ title }}"
                              message: "{{ message }}"
                              data:
                                image: "{{ host }}/api/frigate/notifications/{{ event_id }}/thumbnail.jpg"
                                group: "{{ camera }}-frigate-notification"
                                tag: "{{ event_id }}"
                                priority: high
                    - if:
                        - condition: template
                          value_template: "{{ telegram_chat_id != '' }}"
                      then:
                        - action: telegram_bot.send_photo
                          data:
                            chat_id: !input telegram_chat_id
                            url: "{{ host }}/api/frigate/notifications/{{ event_id }}/snapshot.jpg"
                            caption: "{{ title }}\n{{ message }}"
                            parse_mode: !input telegram_parse_mode
                            disable_notification: !input telegram_silent
                - delay:
                    minutes: !input cooldown
              until:
                - condition: template
                  value_template: "{{ wait.trigger.id == 'image_exists' or repeat.index == 2 }}"
  - alias: Handle End Event
    if:
      - condition: trigger
        id: end_event
    then:
      - delay:
          seconds: 5
      - parallel:
          - alias: Download and Process Clip
            repeat:
              sequence:
                - action: downloader.download_file
                  continue_on_error: true
                  data:
                    overwrite: true
                    url: "{{ host }}/api/frigate/notifications/{{ event_id }}/{{ camera }}/clip.mp4"
                    subdir: "frigate"
                    filename: "{{ event_id }}_clip.mp4"
                - wait_for_trigger:
                    - trigger: event
                      event_type: downloader_download_completed
                      event_data:
                        url: "{{ host }}/api/frigate/notifications/{{ event_id }}/{{ camera }}/clip.mp4"
                        filename: "{{ event_id }}_clip.mp4"
                      id: clip_exists
                  timeout:
                    seconds: !input download_clip_wait
                  continue_on_timeout: true
                - if:
                    - condition: template
                      value_template: "{{ wait.trigger.id == 'clip_exists' }}"
                  then:
                    - if:
                        - condition: template
                          value_template: "{{ use_llm_clip }}"
                      then:
                        - action: llmvision.video_analyzer
                          data:
                            provider: !input provider
                            model: !input model
                            video_file: "{{ download_dir }}/{{ event_id }}_clip.mp4"
                            message: !input clip_prompt
                            target_width: 1080
                            max_tokens: 100
                            max_frames: 3
                          response_variable: llm_response
                        - variables:
                            title: "{{ llm_response.response_title | default(notification_title) }}"
                            message: "{{ llm_response.response_text | default(notification_message) }}"
                      else:
                        - variables:
                            title: "{{ notification_title }} Update"
                            message: !input notification_message
                    - repeat:
                        for_each: "{{ notify_names }}"
                        sequence:
                          - action: notify.{{ repeat.item }}
                            data:
                              title: "{{ title }}"
                              message: "{{ message }}"
                              data:
                                video: "{{ host }}/api/frigate/notifications/{{ event_id }}/review_preview.gif"
                                group: "{{ camera }}-frigate-notification"
                                tag: "{{ event_id }}"
                                priority: high
                    - if:
                        - condition: template
                          value_template: "{{ telegram_chat_id != '' }}"
                      then:
                        - action: telegram_bot.send_video
                          data:
                            chat_id: !input telegram_chat_id
                            url: "{{ host }}/api/frigate/notifications/{{ event_id }}/{{ camera }}/clip.mp4"
                            caption: "{{ title }}\n{{ message }}"
                            parse_mode: !input telegram_parse_mode
                            disable_notification: !input telegram_silent
                - delay:
                    minutes: !input cooldown
              until:
                - condition: template
                  value_template: "{{ wait.trigger.id == 'clip_exists' or repeat.index == 2 }}"

trigger_variables:
  frigate_topic: frigate/reviews

variables:
  event_type: "{{ trigger.payload_json['type'] | default('unknown') }}"
  camera: "{{ trigger.payload_json['after']['camera'] | default('unknown') }}"
  camera_name: "{{ camera | replace('_', ' ') | title | default('Camera') }}"
  input_camera: !input in_camera
  input_camera_name: "{{ input_camera | expand | map(attribute='attributes.camera_name', default='none') | list }}"
  objects: "{{ trigger.payload_json['after']['data']['objects'] | join(', ') | default('object') }}"
  zones: "{{ trigger.payload_json['after']['data']['zones'] | join(', ') | default('area') }}"
  event_id: "{{ trigger.payload_json['after']['id'] | default('unknown') }}"
  input_objects: !input in_objects
  input_zones: !input in_zones
  host: !input in_host
  download_dir: >-
    {% set dir = download_dir | trim | default('downloader') %}
    {% if dir[-1] != '/' %}
      {{ dir + '/' }}
    {% else %}
      {{ dir }}
    {% endif %}
  notify_devices: !input notify_devices
  notify_names: >-
    {% set ns = namespace(device_names=[]) %}
    {% for device_id in notify_devices %}
      {% set device_name = device_attr(device_id, 'name') | default('unknown') %}
      {% set sanitized_name = 'mobile_app_' + device_name | lower | regex_replace('[^a-z0-9_-]', '') %}
      {% set ns.device_names = ns.device_names + [sanitized_name] %}
    {% endfor %}
    {{ ns.device_names }}
  telegram_chat_id: !input telegram_chat_id
  use_llm_image: !input use_llm_image
  use_llm_clip: !input use_llm_clip
  notification_title: !input notification_title
  notification_message: !input notification_message

mode: parallel
max: 4
