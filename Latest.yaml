blueprint:
  name: Frigate Notifications (0.46)
  description: |
    A highly customizable notification template for Frigate Camera Notifications, adapted to use direct Telegram Bot services.

    ### Requirements
      - Minimum Home Assistant Version: 2024.11
      - Minimum Frigate Version: 0.14.0
      - Minimum Frigate Integration Version: 5.7.0
        - **Note**: "Enable the unauthenticated notification event proxy" must be ticked during setup.
      - An MQTT broker connected to Home Assistant and Frigate.
      - Telegram Bot integration configured with a valid API key and chat ID.

    ### Features
      - Select Frigate cameras and mobile devices via dropdown menus.
      - Supports Telegram notifications with photos and videos.
      - Customizable notification title, message, and filters (objects, zones, etc.).
      - Supports multiple cameras and notification groups.
      - Custom actions for manual and auto triggers.

  domain: automation
  input:
    cameras:
      name: Frigate Cameras
      description: Select the Frigate cameras to monitor for events.
      selector:
        entity:
          filter:
            integration: frigate
            domain: camera
          multiple: true
    notify_devices:
      name: Mobile Devices
      description: Select devices running the Home Assistant Companion App for notifications.
      selector:
        device:
          filter:
            integration: mobile_app
          multiple: true
    notify_group:
      name: Notification Group (Optional)
      description: Specify a notification group to override individual devices.
      default: ""
    host:
      name: Base URL
      description: External URL for Home Assistant (e.g., https://example.com:8123).
      default: ""
    telegram_chat_id:
      name: Telegram Chat ID
      description: The Telegram chat ID to send notifications to (e.g., 123456789 or -987654321 for groups).
      default: ""
    mqtt_topic:
      name: MQTT Topic
      description: The MQTT topic for Frigate events.
      default: frigate/reviews
    client_id:
      name: Client ID (Optional)
      description: For multiple Frigate instances; leave blank if unsure.
      default: ""
    title:
      name: Notification Title
      description: The title of the notification.
      default: "{{label}} Detected"
    message:
      name: Notification Message
      description: The message body; supports templates (e.g., {{camera_name}}, {{label}}).
      default: "{{label}} detected on {{camera_name}} at {{event['after']['start_time']|timestamp_custom('%H:%M')}}"
      selector:
        select:
          options:
            - label: Default
              value: "{{label}} detected on {{camera_name}} at {{event['after']['start_time']|timestamp_custom('%H:%M')}}"
            - label: Short
              value: "{{label}} - {{camera_name}}"
            - label: Long
              value: "{{label}} detected on {{camera_name}}{{' in ' + after_zones|join(', ')|replace('_', ' ')|title if after_zones|length}}"
          custom_value: true
    labels:
      name: Object Filter
      description: Objects to trigger notifications (e.g., person, car).
      default: []
      selector:
        select:
          options:
            - person
            - car
            - dog
            - cat
            - package
            - bird
          multiple: true
          custom_value: true
    zones:
      name: Zone Filter
      description: Zones to trigger notifications (lowercase with underscores).
      default: []
      selector:
        select:
          options:
            - porch
            - front_door
            - side
            - garden
          multiple: true
          custom_value: true
    zone_filter:
      name: Enable Zone Filter
      description: Only notify if objects enter specified zones.
      default: false
      selector:
        boolean:
    cooldown:
      name: Cooldown
      description: Seconds to wait before sending another notification for the same camera.
      default: 0
      selector:
        number:
          min: 0
          max: 86400
          unit_of_measurement: seconds
    timeout:
      name: Timeout
      description: Minutes to wait for MQTT updates.
      default: 2
      selector:
        number:
          min: 0
          max: 90
          unit_of_measurement: minutes
    custom_action:
      name: Custom Action
      description: Custom action to trigger on notification.
      default: []
      selector:
        action: {}
mode: parallel
trigger_variables:
  cameras: !input cameras
  mqtt_topic: !input mqtt_topic
triggers:
  - trigger: mqtt
    topic: "{{mqtt_topic}}"
    payload: "new"
    value_template: "{{value_json['type']}}"
    id: frigate-event
  - trigger: event
    event_type: mobile_app_notification_action
    event_data:
      action: "custom-{{this.entity_id}}"
    id: custom
  - trigger: event
    event_type: telegram_callback
    event_data:
      action: "custom-{{this.entity_id}}"
    id: custom
variables:
  camera: "{{trigger.payload_json['after']['camera'] if trigger.id == 'frigate-event'}}"
  camera_name: >-
    {{ {
      'domofon': 'Домофон',
      'MainPTZCamera': 'Поворотная',
      'backyard': 'Задний двор',
      'garage': 'Гараж',
      'povorot': 'Хозблок',
      'hozblock': 'Задний двор',
      'MainHouseCam': 'На доме',
      'gryadki': 'Грядки',
      'zona_otdiha': 'Зона отдыха',
      'banya': 'Баня',
      'terrassa': 'Террасса'
    }.get(camera, camera|replace('_', ' ')|title) }}
  host: "{{input('host').rstrip('/')}}"
  client_id: "{{input('client_id') if not input('client_id') else '/' + input('client_id') if '/' not in input('client_id') else input('client_id')}}"
  notify_group: !input notify_group
  notify_group_target: "{{notify_group|lower|regex_replace('^notify\\.', '')|replace(' ', '_')}}"
  telegram_chat_id: !input telegram_chat_id
  labels: !input labels
  zones: !input zones
  zone_filter: !input zone_filter
  cooldown: !input cooldown
  timeout: !input timeout
  title: !input title
  message: !input message
  event: "{{trigger.payload_json if trigger.id == 'frigate-event'}}"
  id: "{{event['after']['data']['detections'][0] if trigger.id == 'frigate-event'}}"
  review_id: "{{event['after']['id'] if trigger.id == 'frigate-event'}}"
  objects: "{{event['after']['data']['objects'] if trigger.id == 'frigate-event'}}"
  after_zones: "{{event['after']['data']['zones']|list|lower if trigger.id == 'frigate-event'}}"
  label: >-
    {% set data = namespace(labels=[]) %}
    {% for obj in objects %}
      {% if '-verified' not in obj %}
        {% set data.labels = data.labels + [{
          'person': 'Человек',
          'car': 'Машина',
          'dog': 'Собака',
          'cat': 'Кошка',
          'package': 'Посылка',
          'bird': 'Птица'
        }.get(obj, obj|replace('_', ' ')|title)] %}
      {% endif %}
    {% endfor %}
    {{data.labels|unique|sort|join(', ')}}
  thumb: "/api/frigate{{client_id}}/notifications/{{id}}/thumbnail.jpg"
  zones_satisfied: "{{not zone_filter or zones|length == 0 or zones|select('in', after_zones)|list|length > 0}}"
  objects_satisfied: "{{not labels|length or labels|select('in', objects)|list|length > 0 or ('person-verified' in objects and 'person' in labels)}}"
conditions:
  - condition: or
    conditions:
      - condition: trigger
        id: custom
      - condition: and
        conditions:
          - condition: trigger
            id: frigate-event
          - condition: template
            value_template: "{{cameras|expand|map(attribute='attributes.camera_name', default='none')|select('equalto', camera)|list|length > 0}}"
          - condition: template
            value_template: "{{objects_satisfied}}"
          - condition: template
            value_template: "{{zones_satisfied}}"
          - condition: template
            value_template: "{{not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > cooldown}}"
actions:
  - choose:
      - alias: Custom Action
        conditions:
          - condition: trigger
            id: custom
        sequence: !input custom_action
      - alias: Frigate Event
        conditions:
          - condition: trigger
            id: frigate-event
        sequence:
          - choose:
              - conditions:
                  - "{{telegram_chat_id|length > 0}}"
                sequence:
                  - action: telegram_bot.send_photo
                    data:
                      target: "{{telegram_chat_id}}"
                      caption: "{{message}}"
                      url: "{{host}}{{thumb}}"
                      inline_keyboard:
                        - [["View Clip", "{{host}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"]]
                        - [["Silence", "silence-{{this.entity_id}}"]]
            default:
              - action: notify.notify
                data:
                  title: "{{title}}"
                  message: "{{message}}"
                  data:
                    image: "{{host}}{{thumb}}"
                    actions:
                      - action: "URI"
                        title: "View Clip"
                        uri: "{{host}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                      - action: "silence-{{this.entity_id}}"
                        title: "Silence"
            target:
              device_id: !input notify_devices
              entity_id: "{{'notify.' + notify_group_target if notify_group_target}}"
          - repeat:
              sequence:
                - wait_for_trigger:
                    - trigger: mqtt
                      topic: "{{mqtt_topic}}"
                      payload: "{{review_id}}"
                      value_template: "{{value_json['after']['id']}}"
                  timeout:
                    minutes: "{{timeout}}"
                  continue_on_timeout: false
                - variables:
                    event: "{{wait.trigger.payload_json}}"
                    type: "{{event['type']}}"
                    objects: "{{event['after']['data']['objects']}}"
                    after_zones: "{{event['after']['data']['zones']|list|lower}}"
                    label: >-
                      {% set data = namespace(labels=[]) %}
                      {% for obj in objects %}
                        {% if '-verified' not in obj %}
                          {% set data.labels = data.labels + [{
                            'person': 'Человек',
                            'car': 'Машина',
                            'dog': 'Собака',
                            'cat': 'Кошка',
                            'package': 'Посылка',
                            'bird': 'Птица'
                          }.get(obj, obj|replace('_', ' ')|title)] %}
                        {% endif %}
                      {% endfor %}
                      {{data.labels|unique|sort|join(', ')}}
                    zones_satisfied: "{{not zone_filter or zones|length == 0 or zones|select('in', after_zones)|list|length > 0}}"
                    objects_satisfied: "{{not labels|length or labels|select('in', objects)|list|length > 0 or ('person-verified' in objects and 'person' in labels)}}"
                - choose:
                    - conditions:
                        - "{{telegram_chat_id|length > 0}}"
                        - "{{type == 'end'}}"
                      sequence:
                        - action: telegram_bot.send_video
                          data:
                            target: "{{telegram_chat_id}}"
                            caption: "{{message}}"
                            url: "{{host}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                            inline_keyboard:
                              - [["View Clip", "{{host}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"]]
                              - [["Silence", "silence-{{this.entity_id}}"]]
                    - conditions:
                        - "{{telegram_chat_id|length > 0}}"
                      sequence:
                        - action: telegram_bot.send_photo
                          data:
                            target: "{{telegram_chat_id}}"
                            caption: "{{message}}"
                            url: "{{host}}{{thumb}}"
                            inline_keyboard:
                              - [["View Clip", "{{host}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"]]
                              - [["Silence", "silence-{{this.entity_id}}"]]
                    default:
                      - action: notify.notify
                        data:
                          title: "{{title}}"
                          message: "{{message}}"
                          data:
                            image: "{{host}}{{thumb}}"
                            actions:
                              - action: "URI"
                                title: "View Clip"
                                uri: "{{host}}/api/frigate{{client_id}}/notifications/{{id}}/{{camera}}/clip.mp4"
                              - action: "silence-{{this.entity_id}}"
                                title: "Silence"
                        target:
                          device_id: !input notify_devices
                          entity_id: "{{'notify.' + notify_group_target if notify_group_target}}"
              until: "{{not wait.trigger or type == 'end'}}"
